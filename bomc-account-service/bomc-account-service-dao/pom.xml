<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>de.bomc.poc</groupId>
		<artifactId>bomc-account-service</artifactId>
		<version>1.00.00-SNAPSHOT</version>
	</parent>

	<artifactId>bomc-account-service-dao</artifactId>
	
	<packaging>jar</packaging>
	
	<name>${project.artifactId}		::The dao layer of the account microservice.</name>
	<description>A project that provides functionality as dao layer in a Java EE7 context.</description>

	<properties>
		<version.hibernate-validator-annotation-processor>5.1.3.Final</version.hibernate-validator-annotation-processor>

		<!-- other plugin versions -->
		<version.hibernate-validator>5.2.3.Final</version.hibernate-validator>
	</properties>

	<dependencies>
		<!-- First declare the APIs we depend on and need for compilation. All 
			of them are provided by JBoss WildFly -->

		<!-- Import the CDI API, we use provided scope as the API is included in 
			JBoss WildFly -->
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the Common Annotations API (JSR-250), we use provided scope 
			as the API is included in JBoss WildFly -->
		<dependency>
			<groupId>org.jboss.spec.javax.annotation</groupId>
			<artifactId>jboss-annotations-api_1.2_spec</artifactId>
			<scope>provided</scope>
		</dependency>

        <!-- Used for concurrency and transaction handling. -->
		<dependency>
            <groupId>org.jboss.spec.javax.transaction</groupId>
            <artifactId>jboss-transaction-api_1.2_spec</artifactId>
			<scope>provided</scope>
        </dependency>
        
		<!-- Import the JPA API, we use provided scope as the API is included in 
			JBoss WildFly -->
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.1-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- JSR-303 (Bean Validation) Implementation -->
		<!-- Provides portable constraints such as @Email -->
		<!-- Hibernate Validator is shipped in JBoss WildFly -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>${version.hibernate-validator}</version>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Now we declare any tools needed -->

		<!-- Annotation processor that raising compilation errors whenever constraint 
			annotations are incorrectly used. -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator-annotation-processor</artifactId>
			<version>${version.hibernate-validator-annotation-processor}</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>de.bomc.poc</groupId>
			<artifactId>exception-lib</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>de.bomc.poc</groupId>
			<artifactId>logging-lib</artifactId>
			<scope>provided</scope>
		</dependency>
		
		<dependency>
			<groupId>de.bomc.poc</groupId>
			<artifactId>bomc-account-service-model</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Needed for running tests (you may also use TestNG) -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Optional, but highly recommended -->
		<!-- Arquillian allows you to test enterprise code -->
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.arquillian.protocol</groupId>
			<artifactId>arquillian-protocol-servlet</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jacoco</groupId>
			<artifactId>org.jacoco.core</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>asm</groupId>
			<artifactId>asm-util</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Arquillian performance check. -->
		<dependency>
			<groupId>org.jboss.arquillian.extension</groupId>
			<artifactId>arquillian-performance-api</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.arquillian.extension</groupId>
			<artifactId>arquillian-performance-impl</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- End: Arquillian performance check. -->
		
		<!-- Db unit testing -->
		<dependency>
			<groupId>org.jboss.arquillian.extension</groupId>
			<artifactId>arquillian-persistence-api</artifactId>
			<version>${version.arquillian.persistence}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.extension</groupId>
			<artifactId>arquillian-persistence-dbunit</artifactId>
			<version>${version.arquillian.persistence}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.extension</groupId>
			<artifactId>arquillian-persistence-core</artifactId>
			<version>${version.arquillian.persistence}</version>
			<scope>test</scope>
		</dependency>
		<!-- End: Db unit testing -->
	</dependencies>

	<build>
		<finalName>${project.artifactId}</finalName>

		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>version.properties</include>
					<include>**/META-INF/beans.xml</include>
				</includes>
				<filtering>true</filtering>
			</resource>
		</resources>

		<plugins>
			<!-- This plugin provides the capability to build and sign jars, so other 
				projects can use it. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix>
						</manifest>
					</archive>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<configuration>
					<destFile>${basedir}/target/coverage-reports/jacoco-unit.exec</destFile>
					<dataFile>${basedir}/target/coverage-reports/jacoco-unit.exec</dataFile>
				</configuration>
				<executions>
					<execution>
						<id>jacoco-initialize</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>jacoco-site</id>
						<phase>package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<!-- Dies ist das Default-Profile bei dem Junit Tests IMMER ausgeführt 
				werden. 'mvn clean install'. -->
			<!-- Damit Testabdeckung ausgeführt wird, Befehl 'mvn clean test jacoco:report' 
				auf Kommandozeile ausführen. -->
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<skip>false</skip>
							<runOrder>alphabetical</runOrder>
							<!-- Excludes integration tests when unit tests are running. -->
							<excludes>
								<exclude>**/*IT.java</exclude>
							</excludes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		
				<!-- Profile zum Starten und Stoppen von Wildfly. -->
		<!-- Start: 'mvn wildfly:start -Pwildfly-local' -->
		<!-- Stop: 'mvn wildfly:shutdown -Pwildfly-local' -->
		<profile>
			<id>wildfly-local</id>
			<activation>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<skip>false</skip>
							<runOrder>alphabetical</runOrder>
							<!-- Excludes integration tests when unit tests are running. -->
							<excludes>
								<exclude>**/*IT.java</exclude>
							</excludes>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.wildfly.plugins</groupId>
						<artifactId>wildfly-maven-plugin</artifactId>
						<version>${version.wildfly-maven-plugin}</version>
						<configuration>
							<!-- Get the custom wildfly 10.0.0.Final. -->
							<groupId>de.bomc.poc</groupId>
							<artifactId>bomc-wildfly-dist</artifactId>
							<version>${version.bomc.wildfly.dist}</version>
							<!-- Set the server-configuration. -->
							<serverConfig>${wildfly.server.config}</serverConfig>
							<!-- Target directory for deployable artefacts. -->
							<targetDir>${project.parent.basedir}/target</targetDir>
							<jbossHome>${project.parent.basedir}/wildfly-run/wildfly-${version.wildfly}</jbossHome>
							<add-user>
								<users>
									<user>
										<username>admin</username>
										<password>admin.1234</password>
									</user>
									<user>
										<username>admin-user</username>
										<password>user.1234</password>
										<groups>
											<group>admin</group>
											<group>user</group>
										</groups>
										<application-user>true</application-user>
									</user>
									<user>
										<username>default-user</username>
										<password>user.1234</password>
										<groups>
											<group>user</group>
										</groups>
										<application-user>true</application-user>
									</user>
								</users>
							</add-user>
							<serverArgs>
								<serverArg>-Djboss.bind.address=${wildfly.address}</serverArg>
								<serverArg>-Djboss.bind.address.management=${wildfly.management.address}</serverArg>
								<serverArg>-Djboss.socket.binding.port-offset=${wildfly.port.offset}</serverArg>
							</serverArgs>
							<!-- Set additional jvm args, is optional. -->
							<javaOpts>
								<javaOpt>-agentlib:jdwp=transport=dt_socket,address=8787,server=y,suspend=n</javaOpt>
								<javaOpt>-Xms64m</javaOpt>
								<javaOpt>-Xmx512m</javaOpt>
								<javaOpt>-Xss256k</javaOpt>
								<javaOpt>-Djava.net.preferIPv4Stack=true</javaOpt>
								<javaOpt>-Dsun.rmi.dgc.client.gcInterval=3600000</javaOpt>
								<javaOpt>-Dsun.rmi.dgc.server.gcInterval=3600000</javaOpt>
								<!-- The given directory must be available. <javaOpt>-Djboss.server.config.dir=${project.parent.basedir}/conf</javaOpt> -->
							</javaOpts>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- Dieses Profile wird soll auf dem Jenkins ausgeführt werden. Der Unterschied 
				zu den anderen Profilen ist die Verwendung des Failsafe Plugins. Dies ermöglicht 
				das separate Ausführen von Unit tests und Arq-Integrations Test in einem 
				Jenkins Job. -->
			<!-- Run with: mvn clean test '-Parq-wildfly-managed-dist' with code coverage 
				'mvn clean verify -Parq-wildfly-managed-dist' auf Jenkins: 'mvn clean install 
				jacoco:report -Pjacoco,arq-wildfly-managed-dist' -->
			<id>arq-wildfly-managed-dist</id>
			<dependencies>
				<dependency>
					<groupId>org.wildfly</groupId>
					<artifactId>wildfly-arquillian-container-managed</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<!-- Junit tests werden hier nicht ausgeführt. -->
							<skip>true</skip>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<configuration>
							<skip>false</skip>
						</configuration>
						<executions>
							<execution>
								<id>unpack</id>
								<!--<phase>process-test-classes</phase> -->
								<phase>pre-integration-test</phase>
								<goals>
									<goal>unpack</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>de.bomc.poc</groupId>
											<artifactId>bomc-wildfly-dist</artifactId>
											<version>${version.bomc.wildfly.dist}</version>
											<type>zip</type>
											<outputDirectory>${project.build.directory}</outputDirectory>
											<overWrite>false</overWrite>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<skip>false</skip>
							<!-- Für jeden Test wird eine VM gestartet, in dieser VM wird jeweils 
								ein separater Wildfly gestartet, das Test-Artefakt deployed und Wildfly anschliessend 
								gestoppt. -->
							<forkCount>1</forkCount>
							<reuseForks>false</reuseForks>
							<!--<argLine>-Xmx1024m -XX:MaxPermSize=256m</argLine> -->
							<includes>
								<include>**/*IT.java</include>
							</includes>
							<systemProperties>
								<arquillian.launch>wildfly-managed-dist</arquillian.launch>
								<arq.wildfly.home>${project.build.directory}/wildfly-${version.wildfly}</arq.wildfly.home>
								<arq.wildfly.java.vm.arg>${arq.wildfly.java.vm.arg.managed}</arq.wildfly.java.vm.arg>
								<arq.wildfly.server.config.file.name>${wildfly.server.config}</arq.wildfly.server.config.file.name>
								<arq.wildfly.management.address>${wildfly.management.address}</arq.wildfly.management.address>
								<arq.wildfly.management.port>${wildfly.port}</arq.wildfly.management.port>
							</systemProperties>
						</configuration>
						<executions>
							<execution>
								<id>integration-tests</id>
								<phase>integration-test</phase>
								<goals>
									<goal>integration-test</goal>
								</goals>
								<configuration>
									<skip>false</skip>
								</configuration>
							</execution>
							<execution>
								<id>verify</id>
								<goals>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- An optional Arquillian testing profile that executes tests in a remote 
				WildFly instance -->
			<!-- Run with: mvn clean test -Parq-wildfly-remote with code coverage 
				'mvn clean verify -Parq-wildfly-remote' -->
			<id>arq-wildfly-remote</id>
			<dependencies>
				<dependency>
					<groupId>org.wildfly</groupId>
					<artifactId>wildfly-arquillian-container-remote</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<skip>false</skip>
							<includes>
								<include>**/*TestIT.java</include>
							</includes>
							<systemProperties>
								<java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
								<arquillian.launch>wildfly-remote</arquillian.launch>
								<arq.wildfly.management.address>${wildfly.management.address}</arq.wildfly.management.address>
								<arq.wildfly.management.port>${wildfly.port}</arq.wildfly.management.port>
							</systemProperties>
						</configuration>
						<executions>
							<execution>
								<id>integration-tests</id>
								<phase>test</phase>
								<goals>
									<goal>test</goal>
								</goals>
								<configuration>
									<skip>false</skip>
								</configuration>
							</execution>
							<execution>
								<!-- We need to verify the content of jacoco.exec after the 'test' 
									JVM has shutdown and flushed the data to disk. -->
								<id>verify-output-tests</id>
								<phase>test</phase>
								<goals>
									<goal>test</goal>
								</goals>
								<configuration>
									<skip>false</skip>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Profile zum initialen Download vom Wildfly. -->
		<!-- Der Wildfly wird in das Verzeichnis 'project.parent.basedir' runtergeladen 
			und gestartet. -->
		<!-- Dieses Profil sollte nur zum Runterladen ausgefuehrt werden. -->
		<!-- Zum Starten, Stoppen und Deployen sollte das Profile 'wildfly-local-download' 
			benutzt werden. -->
		<!-- Download mit anschliessendem Start von Wildfly: 'mvn wildfly:start 
			-Pwildfly-local-download' -->
		<profile>
			<id>wildfly-local-download</id>
			<activation>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>org.wildfly.plugins</groupId>
						<artifactId>wildfly-maven-plugin</artifactId>
						<version>${version.wildfly-maven-plugin}</version>
						<configuration>
							<!-- Get the custom wildfly 10.0.0.Final. -->
							<groupId>de.bomc.poc</groupId>
							<artifactId>bomc-wildfly-dist</artifactId>
							<version>${version.bomc.wildfly.dist}</version>
							<!-- Set the server-configuration. -->
							<serverConfig>${wildfly.server.config}</serverConfig>
							<targetDir>${project.parent.basedir}</targetDir>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
