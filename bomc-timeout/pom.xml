<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>de.bomc.poc</groupId>
        <artifactId>bomc-parent-pom</artifactId>
        <version>1.00.00-SNAPSHOT</version>
    </parent>

    <artifactId>bomc-timeout</artifactId>

    <packaging>jar</packaging>

    <name>${project.artifactId}</name>
    <description>A project that provides functionality for timeout, retry handling in a Java EE7 context.</description>

    <properties>
    	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    
        <version.wildfly-javaee7>10.1.0.Final</version.wildfly-javaee7>
        <version.harmcrest-core>1.3</version.harmcrest-core>
        <version.hamcrest-library>1.3</version.hamcrest-library>
		<version.commons-lang>2.6</version.commons-lang>
		
        <!-- Defines the Wildfly-dist version from nexus. -->
        <version.bomc.wildfly.dist>1-00-00-SNAPSHOT</version.bomc.wildfly.dist>

        <!-- other plugin versions -->
        <version.wildfly-maven-plugin>1.1.0.Alpha8</version.wildfly-maven-plugin>

        <!-- Properties for arquillian tests. -->
        <!-- Example for start vm-wildfly parameter. -->
        <wildfly.server.config>standalone.xml</wildfly.server.config>
        <wildfly.management.address>192.168.4.1</wildfly.management.address>
        <wildfly.address>192.168.4.1</wildfly.address>
        <wildfly.port>10090</wildfly.port>
        <wildfly.port.offset>100</wildfly.port.offset>
        <!-- IMPORTANT: These properties must be adapted to a available local Wildfly instance. -->
        <!-- These properties are necessary for the managed profiles. -->
        <wildfly.home>${project.basedir}/wildfly-run/wildfly-${version.wildfly-javaee7}</wildfly.home>
        <arq.wildfly.java.vm.arg.managed>
            -Djboss.bind.address=${wildfly.address}
            -Djboss.socket.binding.port-offset=100
            -Djboss.bind.address.management=${wildfly.management.address}
            -Djboss.node.name=local.node0
            -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n
        </arq.wildfly.java.vm.arg.managed>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- JBoss distributes a complete set of Java EE 7 APIs including a Bill
                of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection) 
                of artifacts. We use this here so that we always get the correct versions 
                of artifacts. Here we use the jboss-javaee-7.0-with-tools stack (you can
                read this as the JBoss stack of the Java EE 7 APIs, with some extras tools
                for your project, such as Arquillian for testing) and the jboss-javaee-7.0-with-hibernate
                stack you can read this as the JBoss stack of the Java EE 7 APIs, with extras
                from the Hibernate family of projects) -->
			<dependency>
				<groupId>org.wildfly.bom</groupId>
				<artifactId>wildfly-javaee7-with-tools</artifactId>
				<version>${version.wildfly-javaee7}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>

        <!-- Import the EJB API, we use provided scope as the API is included in
            JBoss WildFly, e.g. ApplicationException -->
        <dependency>
            <groupId>org.jboss.spec.javax.ejb</groupId>
            <artifactId>jboss-ejb-api_3.2_spec</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Now we declare any tools needed -->

        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>${version.commons-lang}</version>
        </dependency>
        
        <!-- Needed for running tests (you may also use TestNG) -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
            <version>${version.harmcrest-core}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
            <version>${version.hamcrest-library}</version>
            <scope>test</scope>
        </dependency>

        <!-- Optional, but highly recommended -->
        <!-- Arquillian allows you to test enterprise code -->
        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-container</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jboss.arquillian.protocol</groupId>
            <artifactId>arquillian-protocol-servlet</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>

        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <!-- This plugin provides the capability to build and sign jars, so other projects can use it. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>analyze</id>
                        <goals>
                            <goal>analyze-only</goal>
                        </goals>
                        <configuration>
                            <failOnWarning>false</failOnWarning>
                            <outputXML>true</outputXML>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <!-- Dies ist das Default-Profile bei dem Junit Tests IMMER ausgeführt werden. 'mvn clean install'. -->
            <!-- Damit Testabdeckung ausgeführt wird, Befehl 'mvn clean test jacoco:report' auf Kommandozeile ausführen. -->
            <id>default</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <skip>false</skip>
                            <runOrder>alphabetical</runOrder>
                            <!-- Excludes integration tests when unit tests are running. -->
                            <excludes>
                                <exclude>**/*IT.java</exclude>
                            </excludes>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-enforcer-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>enforce-property</id>
                                <goals>
                                    <goal>enforce</goal>
                                </goals>
                                <configuration>
                                    <rules>
                                        <requireProperty>
                                            <property>maven.test.skip</property>
                                            <message>*** Property 'maven.test.skip' muss definiert werden. ***</message>
                                            <regex>false</regex>
                                            <regexMessage>*** Autsch, bei Ausfuehrung des 'default'-Profils, koennen die Tests NICHT ge-'skipped' werden!</regexMessage>
                                        </requireProperty>
                                    </rules>
                                    <fail>true</fail>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <!-- Ein Profil bei dem die Tests ge-'skipped' werden, 'mvn clean install -PskipTest'. -->
            <id>skipTest</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <!-- An optional Arquillian testing profile that executes tests in a remote WildFly instance -->
            <!-- Run with: mvn clean test -Parq-wildfly-remote with code coverage 'mvn clean verify -Parq-wildfly-remote' -->
            <id>arq-wildfly-remote</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.wildfly.arquillian</groupId>
                    <artifactId>wildfly-arquillian-container-remote</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <skip>false</skip>
                            <includes>
                                <include>**/*TestIT.java</include>
                            </includes>
                            <systemProperties>
                                <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                                <arquillian.launch>wildfly-remote</arquillian.launch>
                                <arq.wildfly.management.address>${wildfly.management.address}</arq.wildfly.management.address>
                                <arq.wildfly.management.port>${wildfly.port}</arq.wildfly.management.port>
                            </systemProperties>
                        </configuration>
                        <executions>
                            <execution>
                                <id>integration-tests</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>test</goal>
                                </goals>
                                <configuration>
                                    <skip>false</skip>
                                </configuration>
                            </execution>
                            <execution>
                                <!-- We need to verify the content of jacoco.exec after the 'test'
                                    JVM has shutdown and flushed the data to disk. -->
                                <id>verify-output-tests</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>test</goal>
                                </goals>
                                <configuration>
                                    <skip>false</skip>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
