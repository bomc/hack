<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>de.bomc.poc</groupId>
	<artifactId>bomc-invoice</artifactId>

	<name>${project.artifactId}</name>

	<version>1.00.00-SNAPSHOT</version>

	<packaging>war</packaging>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>

		<failOnMissingWebXml>false</failOnMissingWebXml>

		<!-- <version.json-api>1.0</version.json-api> -->

		<!-- Properties set in version.properties file. -->
		<timestamp>${maven.build.timestamp}</timestamp>
		<maven.build.timestamp.format>yyyy-MM-dd HH:mm</maven.build.timestamp.format>

		<!-- automatically run annotation processors within the incremental compilation -->
		<m2e.apt.activation>jdt_apt</m2e.apt.activation>

		<!-- Jacoco test coverage properties. -->
		<jacoco.instruction.coveredratio>0.01</jacoco.instruction.coveredratio>
		<jacoco.complexity.coveredratio>0.01</jacoco.complexity.coveredratio>
		<jacoco.line.coveredratio>0.01</jacoco.line.coveredratio>
		<jacoco.branch.coveredratio>0.01</jacoco.branch.coveredratio>

		<!-- All used dependencies -->
		<version.exception-lib-ext>1.00.00-SNAPSHOT</version.exception-lib-ext>

		<version.thorntail>2.5.0.Final</version.thorntail>
		<version.arquillian-bom>1.4.1.Final</version.arquillian-bom>
		<version.swagger-ui>1.0.2</version.swagger-ui>
		<version.javaee-api>8.0</version.javaee-api>
		<version.postgresql>9.4.1212</version.postgresql>
		<version.h2>1.4.197</version.h2>
		<version.javax.json>1.0.3</version.javax.json>
		<version.mapstruct-jdk8>1.3.0.Final</version.mapstruct-jdk8>
		<version.mapstruct>1.3.0.Final</version.mapstruct>
		<version.mapstruct-processor>1.3.0.Final</version.mapstruct-processor>
		<version.hibernate-core>5.4.0.Final</version.hibernate-core>
		<version.junit>4.12</version.junit>
		<version.hamcrest>2.1</version.hamcrest>
		<version.hibernate-entitymanager>5.4.0.Final</version.hibernate-entitymanager>
		<!-- <version.arquillian-bom>1.1.12.Final</version.arquillian-bom> -->
		<version.org.jacoco.core>0.8.4</version.org.jacoco.core>
		<version.arquillian-jacoco>1.0.0.Alpha10</version.arquillian-jacoco>
		<!-- Other plugins -->
		<version.maven-compiler-plugin>3.5.1</version.maven-compiler-plugin>
		<version.maven-processor-plugin>3.1.0</version.maven-processor-plugin>
		<version.jacoco-maven-plugin>0.8.4</version.jacoco-maven-plugin>
		<version.maven-surefire-plugin>2.22.2</version.maven-surefire-plugin>
		<version.maven-failsafe-plugin>2.22.2</version.maven-failsafe-plugin>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>io.thorntail</groupId>
				<artifactId>bom</artifactId>
				<version>${version.thorntail}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
			<dependency>
				<groupId>org.jboss.arquillian</groupId>
				<artifactId>arquillian-bom</artifactId>
				<version>${version.arquillian-bom}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<finalName>${project.artifactId}</finalName>

		<!-- <pluginManagement> -->
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${version.maven-compiler-plugin}</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
					<encoding>UTF-8</encoding>
					<showWarnings>true</showWarnings>
					<showDeprecation>true</showDeprecation>
					<annotationProcessorPaths>
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${version.mapstruct-processor}</version>
						</path>
					</annotationProcessorPaths>
					<generatedSourcesDirectory>${project.build.directory}/generated-sources</generatedSourcesDirectory>
					<compilerArgs>
						<arg>-parameters</arg>
					</compilerArgs>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.bsc.maven</groupId>
				<artifactId>maven-processor-plugin</artifactId>
				<version>${version.maven-processor-plugin}</version>
				<configuration>
					<defaultOutputDirectory>${project.build.directory}/generated-sources</defaultOutputDirectory>
					<processors>
						<processor>org.mapstruct.ap.MappingProcessor</processor>
					</processors>
					<options>
						<mapstruct.suppressGeneratorTimestamp>true</mapstruct.suppressGeneratorTimestamp>
						<mapstruct.defaultComponentModel>default</mapstruct.defaultComponentModel>
					</options>
				</configuration>
				<executions>
					<execution>
						<id>process-mapstruct</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>process</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.mapstruct</groupId>
						<artifactId>mapstruct-processor</artifactId>
						<version>${version.mapstruct-processor}</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>k8</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<!-- Used to write version and build timestamp to version.properties. -->
				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<filtering>true</filtering>
						<includes>
							<include>project-defaults.yml</include>
							<include>project-kubernetes.yml</include>
							<include>openapi.png</include>
							<include>modules/com/h2database/h2/main/module.xml</include>
							<include>modules/org/postgresql/main/module.xml</include>
							<include>META-INF/microprofile-config.properties</include>
							<include>META-INF/beans.xml</include>
							<include>META-INF/persistence.xml</include>
						</includes>
					</resource>
				</resources>
				<plugins>
					<plugin>
						<groupId>io.thorntail</groupId>
						<artifactId>thorntail-maven-plugin</artifactId>
						<version>${version.thorntail}</version>
						<executions>
							<execution>
								<id>package</id>
								<goals>
									<goal>package</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- ### To run tests with out starting fatJar run: ### -->
		<!-- ### 'mvn clean install -Plocal' ### -->
		<profile>
			<id>local</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<!-- Used to write version and build timestamp to version.properties. -->
				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<filtering>true</filtering>
						<includes>
							<include>project-defaults.yml</include>
							<include>project-local.yml</include>
							<include>openapi.png</include>
							<include>modules/com/h2database/h2/main/module.xml</include>
							<include>modules/org/postgresql/main/module.xml</include>
							<include>META-INF/microprofile-config.properties</include>
							<include>META-INF/beans.xml</include>
							<include>META-INF/persistence.xml</include>
						</includes>
					</resource>
				</resources>
 
				<plugins>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${version.jacoco-maven-plugin}</version>
						<executions>
				            <!--
        						Prepares the property pointing to the JaCoCo runtime agent which
        						is passed as VM argument when Maven the Surefire plugin is executed.
        					-->
							<execution>
								<id>pre-unit-test</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
              					<configuration>
                					<!-- Sets the path to the file which contains the execution data. -->
                					<destFile>${project.build.directory}/code-coverage/jacoco-ut.exec</destFile>
                					<!--
            							Sets the name of the property containing the settings
            							for JaCoCo runtime agent.
        							-->
                					<propertyName>surefireArgLine</propertyName>
              					</configuration>
							</execution>
							<!-- Ensures that the code coverage report for unit tests is created 
								after unit tests have been run. -->
            				<execution>
              					<id>post-unit-test</id>
              					<phase>test</phase>
              					<goals>
                					<goal>report</goal>
              					</goals>
              					<configuration>
                					<!-- Sets the path to the file which contains the execution data. -->
                					<dataFile>${project.build.directory}/code-coverage/jacoco-ut.exec</dataFile>
                					<!-- Sets the output directory for the code coverage report. -->
                					<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
              					</configuration>
            				</execution>
            				<execution>
              					<id>pre-integration-test</id>
              					<phase>pre-integration-test</phase>
              					<goals>
                					<goal>prepare-agent</goal>
              					</goals>
              					<configuration>
                					<!-- Sets the path to the file which contains the execution data. -->
                					<destFile>${project.build.directory}/code-coverage/jacoco-it.exec</destFile>
                					<!--
            							Sets the name of the property containing the settings
            							for JaCoCo runtime agent.
        							-->
                					<propertyName>failsafeArgLine</propertyName>
              					</configuration>
            				</execution>
            				<!--
        						Ensures that the code coverage report for integration tests after
        						integration tests have been run.
        					-->
            				<execution>
              					<id>post-integration-test</id>
              					<phase>post-integration-test</phase>
              					<goals>
                					<goal>report</goal>
              					</goals>
              					<configuration>
                					<!-- Sets the path to the file which contains the execution data. -->
                					<dataFile>${project.build.directory}/code-coverage/jacoco-it.exec</dataFile>
                					<!-- Sets the output directory for the code coverage report. -->
                					<outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
              					</configuration>
            				</execution>
							<execution>
								<id>merge-ut-it-jacoco</id>
								<goals>
									<goal>merge</goal>
									<goal>report</goal>
								</goals>
								<phase>post-integration-test</phase>
								<configuration>
									<fileSets>
										<fileSet
											implementation="org.apache.maven.shared.model.fileset.FileSet">
											<directory>${project.build.directory}/code-coverage</directory>
											<includes>
												<include>*.exec</include>
											</includes>
										</fileSet>
									</fileSets>
									<destFile>${project.build.directory}/coverage-reports/jacoco-dev.exec</destFile>
                					<!-- Sets the path to the file which contains the execution data. -->
                					<dataFile>${project.build.directory}/coverage-reports/jacoco-dev.exec</dataFile>
                					<!-- Sets the output directory for the code coverage report. -->
                					<outputDirectory>${project.reporting.outputDirectory}/jacoco-merged</outputDirectory>
								</configuration>
							</execution>
                            <execution>
                                <id>jacoco-check</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                                <configuration>
                                	<destFile>${project.build.directory}/coverage-reports/jacoco-dev.exec</destFile>
                                    <rules>
                                        <rule>
                                            <element>BUNDLE</element>
                                            <limits>
                                                <!-- The supported counter options are: LINE, BRANCH, INSTRUCTION,
                                                    COMPLEXITY, METHOD, CLASS (mvn clean verify). -->
                                                <limit>
                                                    <counter>LINE</counter>
                                                    <value>COVEREDRATIO</value>
                                                    <minimum>${jacoco.line.coveredratio}</minimum>
                                                </limit>
                                                <limit>
                                                    <counter>BRANCH</counter>
                                                    <value>COVEREDRATIO</value>
                                                    <minimum>${jacoco.branch.coveredratio}</minimum>
                                                </limit>
                                                <limit>
                                                    <counter>INSTRUCTION</counter>
                                                    <value>COVEREDRATIO</value>
                                                    <minimum>${jacoco.instruction.coveredratio}</minimum>
                                                </limit>
                                                <limit>
                                                    <counter>COMPLEXITY</counter>
                                                    <value>COVEREDRATIO</value>
                                                    <minimum>${jacoco.complexity.coveredratio}</minimum>
                                                </limit>
                                            </limits>
                                        </rule>
                                    </rules>
                                </configuration>
                            </execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${version.maven-surefire-plugin}</version>
						<configuration>
							<!-- Junit tests werden hier ausgeführt. -->
							<skip>false</skip>
<!-- 							<forkCount>1</forkCount> -->
<!-- 							<reuseForks>true</reuseForks> -->
							<includes>
								<include>**/*Test.java</include>
							</includes>
							<!-- Sets the VM argument line used when unit tests are run. -->
							<argLine>${surefireArgLine}</argLine>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${version.maven-failsafe-plugin}</version>
						<executions>
							<!-- Ensures that both integration-test and verify goals of the Failsafe 
								Maven plugin are executed. -->
							<execution>
								<id>integration-tests</id>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
								<configuration>
									<skip>false</skip>
									<!-- Für jeden Test wird eine VM gestartet, in dieser VM wird jeweils 
										ein separater Wildfly gestartet, das Test-Artefakt deployed und Wildfly anschliessend 
										gestoppt. -->
<!-- 									<forkCount>1</forkCount> -->
<!-- 									<reuseForks>false</reuseForks> -->
									<includes>
										<include>**/*IT.java</include>
									</includes>
									<!-- Sets the VM argument line used when integration tests are run. -->
									<argLine>${failsafeArgLine}</argLine>
									
<!--                         			<systemPropertyVariables> -->
<!--                             			<jacoco.test>${failsafeArgLine}</jacoco.test> -->
<!--                         			</systemPropertyVariables> -->
                        			
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>io.thorntail</groupId>
						<artifactId>thorntail-maven-plugin</artifactId>
						<version>${version.thorntail}</version>
						<configuration>
							<jvmArguments>
								<jvmArgument>-Xmx256m</jvmArgument>
							</jvmArguments>
						</configuration>
						<executions>
							<execution>
								<id>package</id>
								<goals>
									<goal>package</goal>
								</goals>
							</execution>
							<execution>
								<id>start</id>
<!-- 								<phase>pre-integration-test</phase> -->
<!-- 								<goals> -->
<!-- 									<goal>start</goal> -->
<!-- 								</goals> -->
								<configuration>
									<arguments>-Slocal</arguments>
								</configuration>
							</execution>
							<execution>
								<id>stop</id>
<!-- 								<phase>post-integration-test</phase> -->
<!-- 								<goals> -->
<!-- 									<goal>stop</goal> -->
<!-- 								</goals> -->
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<dependencies>
		<dependency>
			<groupId>de.bomc.poc</groupId>
			<artifactId>exception-lib-ext</artifactId>
			<version>${version.exception-lib-ext}</version>
		</dependency>

		<dependency>
			<groupId>io.thorntail</groupId>
			<artifactId>microprofile</artifactId>
		</dependency>

		<dependency>
			<groupId>io.thorntail</groupId>
			<artifactId>jaxrs</artifactId>
		</dependency>

		<dependency>
			<groupId>io.thorntail</groupId>
			<artifactId>ejb</artifactId>
		</dependency>

		<dependency>
			<groupId>io.thorntail</groupId>
			<artifactId>datasources</artifactId>
		</dependency>

		<dependency>
			<groupId>io.thorntail</groupId>
			<artifactId>jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>io.thorntail</groupId>
			<artifactId>transactions</artifactId>
		</dependency>

		<dependency>
			<groupId>io.thorntail</groupId>
			<artifactId>undertow</artifactId>
		</dependency>

		<dependency>
			<groupId>io.thorntail</groupId>
			<artifactId>arquillian</artifactId>
			<scope>test</scope>
		</dependency>
		
		<dependency>
			<groupId>org.microprofile-ext.openapi-ext</groupId>
			<artifactId>swagger-ui</artifactId>
			<version>${version.swagger-ui}</version>
		</dependency>

		<!-- <dependency> -->
		<!-- <groupId>org.webjars.bower</groupId> -->
		<!-- <artifactId>swagger-ui-themes</artifactId> -->
		<!-- <version>3.0.0</version> -->
		<!-- <scope>runtime</scope> -->
		<!-- </dependency> -->

		<dependency>
			<groupId>org.glassfish</groupId>
			<artifactId>javax.json</artifactId>
			<version>${version.javax.json}</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${version.hibernate-core}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>${version.postgresql}</version>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>${version.h2}</version>
			<scope>test</scope>
		</dependency>

		<!-- mapstruct -->
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${version.mapstruct}</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct-jdk8</artifactId>
			<version>${version.mapstruct-jdk8}</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct-processor</artifactId>
			<version>${version.mapstruct-processor}</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${version.junit}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest</artifactId>
			<version>${version.hamcrest}</version>
			<scope>test</scope>
		</dependency>

		<!-- Only necessary for in-memory tests with hibernate. -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${version.hibernate-entitymanager}</version>
			<scope>test</scope>
		</dependency>

		<!-- Test coverage -->
		<dependency>
			<groupId>org.jacoco</groupId>
			<artifactId>org.jacoco.core</artifactId>
			<version>${version.org.jacoco.core}</version>
			<scope>test</scope>
		</dependency>

		<!-- All needs to run arquillian tests. -->
        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-container</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.protocol</groupId>
            <artifactId>arquillian-protocol-servlet</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.container</groupId>
            <artifactId>arquillian-container-test-api</artifactId>
            <scope>test</scope>
        </dependency>



		<dependency>
			<groupId>org.jboss.arquillian.extension</groupId>
			<artifactId>arquillian-jacoco</artifactId>
			<version>${version.arquillian-jacoco}</version>
			<scope>test</scope>
		</dependency>
		
		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-depchain</artifactId>
			<scope>test</scope>
			<type>pom</type>
		</dependency>

	</dependencies>
</project>
