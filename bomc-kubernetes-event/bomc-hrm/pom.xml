<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.4.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>de.bomc.poc</groupId>
	<artifactId>hrm</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>hrm</name>
	<description>A demo project for a microservice app.</description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>

		<!-- Jacoco test coverage properties. -->
		<jacoco.instruction.coveredratio>0.01</jacoco.instruction.coveredratio>
		<jacoco.complexity.coveredratio>0.01</jacoco.complexity.coveredratio>
		<jacoco.line.coveredratio>0.01</jacoco.line.coveredratio>
		<jacoco.branch.coveredratio>0.01</jacoco.branch.coveredratio>

		<!-- Automatically run annotation processors within the incremental compilation. -->
		<m2e.apt.activation>jdt_apt</m2e.apt.activation>

		<version.lombok>1.18.6</version.lombok>
		<version.mapstruct-jdk8>1.3.0.Final</version.mapstruct-jdk8>
		<version.springfox-swagger2>2.9.2</version.springfox-swagger2>
		<version.springfox-swagger-ui>2.9.2</version.springfox-swagger-ui>
		<version.springfox-bean-validators>2.9.2</version.springfox-bean-validators>
		<version.spring-cloud-starter-sleuth>2.1.4.RELEASE</version.spring-cloud-starter-sleuth>
		<version.org.jacoco.core>0.8.4</version.org.jacoco.core>
		<version.commons-lang>2.6</version.commons-lang>

		<!-- Other plugins -->
		<version.mapstruct-processor>1.3.0.Final</version.mapstruct-processor>
		<version.jacoco-maven-plugin>0.8.4</version.jacoco-maven-plugin>
		<version.maven-surefire-plugin>2.22.2</version.maven-surefire-plugin>
	</properties>

	<dependencies>
		<!-- Starter for using Spring Data JPA with Hibernate. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jersey</artifactId>
		</dependency>
		<!-- Starter for building web, including RESTful, applications using Spring 
			MVC. Uses Tomcat as the default embedded container. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
			<version>${version.spring-cloud-starter-sleuth}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- Used for exception handling, ExceptionUtils. -->
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>${version.commons-lang}</version>
		</dependency>

		<!-- Necessary to convert object to json in ResponseEntity -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>

		<!-- JDBC driver for Postgres. -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct-jdk8</artifactId>
			<version>${version.mapstruct-jdk8}</version>
		</dependency>
		<!-- <dependency> -->
		<!-- <groupId>org.flywaydb</groupId> -->
		<!-- <artifactId>flyway-core</artifactId> -->
		<!-- </dependency> -->
		<!-- Handle LocalDateTime for json mapping. -->
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jsr310</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- Starter for testing Spring Boot applications with libraries including 
			JUnit, Hamcrest and Mockito. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest</artifactId>
			<version>2.1</version>
			<scope>test</scope>
		</dependency>

		<!-- H2 Database Engine. -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<!-- <scope>test</scope> -->
		</dependency>
		<!-- swagger -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>${version.springfox-swagger2}</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>${version.springfox-swagger-ui}</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-bean-validators</artifactId>
			<version>${version.springfox-bean-validators}</version>
		</dependency>

	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<configuration>
							<!-- If there are more then one main class. -->
							<mainClass>de.bomc.poc.hrm.HrmApplication</mainClass>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skip>false</skip>
					<includes>
						<include>**/*Test.java</include>
					</includes>
					<!-- Sets the VM argument line used when unit tests are run. -->
					<argLine>${surefireArgLine}</argLine>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${version.lombok}</version>
						</path>
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${version.mapstruct-processor}</version>
						</path>
					</annotationProcessorPaths>
					<compilerArgs>
						<arg>-Amapstruct.suppressGeneratorTimestamp=true</arg>
						<arg>-Amapstruct.defaultComponentModel=spring</arg>
					</compilerArgs>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${version.jacoco-maven-plugin}</version>
				<executions>
					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when Maven the Surefire plugin is executed. -->
					<execution>
						<id>pre-unit-test</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${project.build.directory}/code-coverage/jacoco-ut.exec</destFile>
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent. -->
							<propertyName>surefireArgLine</propertyName>
						</configuration>
					</execution>
					<!-- Ensures that the code coverage report for unit tests is created 
						after unit tests have been run. -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${project.build.directory}/code-coverage/jacoco-ut.exec</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>jacoco-check</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<dataFile>${project.build.directory}/code-coverage/jacoco-ut.exec</dataFile>
							<rules>
								<rule>
									<element>BUNDLE</element>
									<limits>
										<!-- The supported counter options are: LINE, BRANCH, INSTRUCTION, 
											COMPLEXITY, METHOD, CLASS (mvn clean verify). -->
										<limit>
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.line.coveredratio}</minimum>
										</limit>
										<limit>
											<counter>BRANCH</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.branch.coveredratio}</minimum>
										</limit>
										<limit>
											<counter>INSTRUCTION</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.instruction.coveredratio}</minimum>
										</limit>
										<limit>
											<counter>COMPLEXITY</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.complexity.coveredratio}</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- <plugin> -->
			<!-- <groupId>com.devskiller.jpa2ddl</groupId> -->
			<!-- <artifactId>jpa2ddl-maven-plugin</artifactId> -->
			<!-- <version>0.9.12</version> -->
			<!-- <extensions>true</extensions> -->
			<!-- required to run automatically -->
			<!-- <configuration> -->
			<!-- <outputPath>${basedir}/src/main/resources/database.sql</outputPath> -->
			<!-- <packages> -->
			<!-- <package>de.bomc.poc.hrm.domain.model</package> -->
			<!-- </packages> -->
			<!-- <jpaProperties> -->
			<!-- <property> -->
			<!-- <name>hibernate.dialect</name> -->
			<!-- <value>org.hibernate.dialect.H2Dialect</value> -->
			<!-- </property> -->
			<!-- <property> -->
			<!-- <name>hibernate.default_schema</name> -->
			<!-- <value>prod</value> -->
			<!-- </property> -->
			<!-- </jpaProperties> -->
			<!-- <formatOutput>true</formatOutput> -->
			<!-- <skipSequences>true</skipSequences> -->
			<!-- <delimiter>;</delimiter> -->
			<!-- <action>DROP_AND_CREATE</action> -->
			<!-- </configuration> -->
			<!-- </plugin> -->
		</plugins>
	</build>

	<profiles>
		<!-- A profile that skips the tests: mvn clean install -PskipTest -->
		<profile>
			<id>skipTest</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${version.maven-surefire-plugin}</version>
						<configuration>
							<skipTests>true</skipTests>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- A profile that runs the 'dev' profile: mvn clean install -Pdev -->
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<spring.profiles.active>dev</spring.profiles.active>
				<spring.application.name>${project.artifactId}</spring.application.name>
			</properties>
		</profile>

		<!-- A profile that runs the 'prod' profile: mvn spring-boot:run -Pprod -->
		<profile>
			<id>prod</id>
			<properties>
				<spring.profiles.active>prod</spring.profiles.active>
				<spring.application.name>${project.artifactId}</spring.application.name>
			</properties>
		</profile>
	</profiles>

</project>
