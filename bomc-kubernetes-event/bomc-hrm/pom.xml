<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.2.0.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>de.bomc.poc</groupId>
	<artifactId>hrm</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>hrm</name>
	<description>A demo project for a microservice app.</description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>

		<!-- NOTE: This prevents eclipse showing "Maven Configuration Problem: 
			Unknown". the error comes with update to spring-boot 2.1.9.RELEASE. This 
			is a downgrade from 3.1.2 in parent pom. -->
		<maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>

		<!-- Jacoco test coverage properties. -->
		<jacoco.instruction.coveredratio>0.01</jacoco.instruction.coveredratio>
		<jacoco.complexity.coveredratio>0.01</jacoco.complexity.coveredratio>
		<jacoco.line.coveredratio>0.01</jacoco.line.coveredratio>
		<jacoco.branch.coveredratio>0.01</jacoco.branch.coveredratio>

		<!-- Automatically run annotation processors within the incremental compilation. -->
		<m2e.apt.activation>jdt_apt</m2e.apt.activation>

		<version.mapstruct-jdk8>1.3.0.Final</version.mapstruct-jdk8>
		<version.springfox-swagger2>2.9.2</version.springfox-swagger2>
		<version.springfox-swagger-ui>2.9.2</version.springfox-swagger-ui>
		<version.springfox-bean-validators>2.9.2</version.springfox-bean-validators>
		<version.spring-cloud-starter-sleuth>2.1.4.RELEASE</version.spring-cloud-starter-sleuth>
		<version.spring-cloud-starter-kubernetes-config>1.0.4.RELEASE</version.spring-cloud-starter-kubernetes-config>
		<version.org.jacoco.core>0.8.4</version.org.jacoco.core>
		<version.commons-lang>2.6</version.commons-lang>
		<version.datasource-proxy>1.5.1</version.datasource-proxy>
		<version.spring-restdocs-asciidoctor>2.0.4.RELEASE</version.spring-restdocs-asciidoctor>
		<!-- Used in maven compiler plugin. -->
		<version.lombok>1.18.10</version.lombok>

		<!-- Other plugins -->
		<version.mapstruct-processor>1.3.0.Final</version.mapstruct-processor>
		<version.jacoco-maven-plugin>0.8.4</version.jacoco-maven-plugin>
		<version.maven-surefire-plugin>2.22.2</version.maven-surefire-plugin>
		<version.jpa2ddl-maven-plugin>0.9.12</version.jpa2ddl-maven-plugin>
		<version.asciidoctor-maven-plugin>1.6.0</version.asciidoctor-maven-plugin>
		<version.dependency-check-maven>5.2.2</version.dependency-check-maven>
		<version.keycloak-adapter-bom>7.0.1</version.keycloak-adapter-bom>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.keycloak.bom</groupId>
				<artifactId>keycloak-adapter-bom</artifactId>
				<version>${version.keycloak-adapter-bom}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- Starter for using Spring Data JPA with Hibernate. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- Starter for building web, including RESTful, applications using Spring 
			MVC. Uses Tomcat as the default embedded container. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- Spring boot actuator to expose metrics endpoint -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<!-- Add test tools to the development. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>
		<!-- Starter for testing Spring Boot applications with libraries including 
			JUnit, Hamcrest and Mockito. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- To use kubernetes-ConfigMaps to externalize the application configuration. -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-kubernetes-config</artifactId>
			<version>${version.spring-cloud-starter-kubernetes-config}</version>
		</dependency>
		<!-- Enables keycloak functionality -->
		<dependency>
			<groupId>org.keycloak</groupId>
			<artifactId>keycloak-spring-boot-starter</artifactId>
		</dependency>
		<!-- Enable tracing -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
			<version>${version.spring-cloud-starter-sleuth}</version>
		</dependency>

		<!-- Micrometer core dependency -->
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-core</artifactId>
		</dependency>
		<!-- Micrometer prometheus registry, Spring Boot will automatically configure 
			PrometheusMeterRegistry and a CollectorRegistry to collect and export metrics 
			data in a format that can be scrapped by a Prometheus server. -->
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
		</dependency>

		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>

		<!-- Used for exception handling, ExceptionUtils. -->
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>${version.commons-lang}</version>
		</dependency>

		<!-- Necessary to convert object to json in ResponseEntity -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>

		<!-- https://github.com/ttddyy/datasource-proxy/wiki/How-To-Guide, used 
			for logging. -->
		<dependency>
			<groupId>net.ttddyy</groupId>
			<artifactId>datasource-proxy</artifactId>
			<version>${version.datasource-proxy}</version>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct-jdk8</artifactId>
			<version>${version.mapstruct-jdk8}</version>
		</dependency>
		<!-- Handle LocalDateTime for json mapping. -->
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jsr310</artifactId>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- H2 Database Engine. -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>

		<!-- PostGreSQL Database Engine. -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
		</dependency>

		<!-- swagger -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>${version.springfox-swagger2}</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>${version.springfox-swagger-ui}</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-bean-validators</artifactId>
			<version>${version.springfox-bean-validators}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.restdocs</groupId>
			<artifactId>spring-restdocs-mockmvc</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
						<configuration>
							<!-- If there are more then one main class. -->
							<mainClass>de.bomc.poc.hrm.HrmApplication</mainClass>
						</configuration>
					</execution>
					<!-- <execution> -->
					<!-- <goals> -->
					<!-- <goal>build-info</goal> -->
					<!-- </goals> -->
					<!-- </execution> -->
				</executions>
				<configuration>
					<redeploy>true</redeploy>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skip>false</skip>
					<includes>
						<include>**/*Test.java</include>
					</includes>
					<!-- Sets the VM argument line used when unit tests are run. -->
					<argLine>${surefireArgLine}</argLine>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${version.lombok}</version>
						</path>
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${version.mapstruct-processor}</version>
						</path>
					</annotationProcessorPaths>
					<compilerArgs>
						<arg>-Amapstruct.suppressGeneratorTimestamp=true</arg>
						<arg>-Amapstruct.defaultComponentModel=spring</arg>
					</compilerArgs>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${version.jacoco-maven-plugin}</version>
				<executions>
					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when Maven the Surefire plugin is executed. -->
					<execution>
						<id>pre-unit-test</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${project.build.directory}/code-coverage/jacoco-ut.exec</destFile>
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent. -->
							<propertyName>surefireArgLine</propertyName>
						</configuration>
					</execution>
					<!-- Ensures that the code coverage report for unit tests is created 
						after unit tests have been run. -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${project.build.directory}/code-coverage/jacoco-ut.exec</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>jacoco-check</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<dataFile>${project.build.directory}/code-coverage/jacoco-ut.exec</dataFile>
							<rules>
								<rule>
									<element>BUNDLE</element>
									<limits>
										<!-- The supported counter options are: LINE, BRANCH, INSTRUCTION, 
											COMPLEXITY, METHOD, CLASS (mvn clean verify). -->
										<limit>
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.line.coveredratio}</minimum>
										</limit>
										<limit>
											<counter>BRANCH</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.branch.coveredratio}</minimum>
										</limit>
										<limit>
											<counter>INSTRUCTION</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.instruction.coveredratio}</minimum>
										</limit>
										<limit>
											<counter>COMPLEXITY</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.complexity.coveredratio}</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Reads the current project-version form git. For mor information see: 
				https://www.baeldung.com/spring-git-information -->
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<executions>
					<execution>
						<id>get-the-git-infos</id>
						<goals>
							<goal>revision</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<failOnNoGitDirectory>false</failOnNoGitDirectory>
					<dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
					<prefix>git</prefix>
					<verbose>false</verbose>
					<generateGitPropertiesFile>true</generateGitPropertiesFile>
					<generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>
					<format>properties</format>
					<gitDescribe>
						<skip>false</skip>
						<always>false</always>
						<dirty>-dirty</dirty>
					</gitDescribe>
					<!-- Including only specified data. -->
					<includeOnlyProperties>
						<includeOnlyProperty>git.commit.id</includeOnlyProperty>
						<includeOnlyProperty>git.commit.user.name</includeOnlyProperty>
						<includeOnlyProperty>git.commit.message.full</includeOnlyProperty>
						<includeOnlyProperty>git.build.time</includeOnlyProperty>
						<includeOnlyProperty>git.build.version</includeOnlyProperty>
					</includeOnlyProperties>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<!-- A profile that skips the tests: mvn clean install -PskipTest -->
		<profile>
			<id>skipTest</id>
			<properties>
				<spring.profiles.active>prod</spring.profiles.active>
				<spring.application.name>${project.artifactId}</spring.application.name>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${version.maven-surefire-plugin}</version>
						<configuration>
							<skipTests>true</skipTests>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- A profile that runs the 'dev' profile: mvn clean install -Pdev -->
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<spring.profiles.active>dev</spring.profiles.active>
				<spring.application.name>${project.artifactId}</spring.application.name>
			</properties>
		</profile>

		<!-- A profile that runs the 'prod' profile: mvn spring-boot:run -Pprod -->
		<profile>
			<id>prod</id>
			<properties>
				<spring.profiles.active>prod</spring.profiles.active>
				<spring.application.name>${project.artifactId}</spring.application.name>
			</properties>
		</profile>

		<!-- A profile that generates the schema from the model. -->
		<profile>
			<id>schema</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.devskiller.jpa2ddl</groupId>
						<artifactId>jpa2ddl-maven-plugin</artifactId>
						<version>${version.jpa2ddl-maven-plugin}</version>
						<!-- Required to run automatically -->
						<extensions>true</extensions>
						<executions>
							<execution>
								<id>generate</id>
								<goals>
									<goal>generate</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<outputPath>${basedir}/src/main/resources/database_jpa_ddl.sql</outputPath>
							<packages>
								<package>de.bomc.poc.hrm.domain.model</package>
							</packages>
							<jpaProperties>
								<property>
									<name>hibernate.dialect</name>
									<value>org.hibernate.dialect.PostgreSQL9Dialect</value>
								</property>
								<property>
									<name>hibernate.default_schema</name>
									<value>bomc</value>
								</property>
							</jpaProperties>
							<formatOutput>true</formatOutput>
							<skipSequences>false</skipSequences>
							<delimiter>;</delimiter>
							<!-- <action>UPDATE</action> -->
							<action>DROP_AND_CREATE</action>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>api-docs-ascii</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.asciidoctor</groupId>
						<artifactId>asciidoctor-maven-plugin</artifactId>
						<version>${version.asciidoctor-maven-plugin}</version>
						<executions>
							<execution>
								<id>generate-docs</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>process-asciidoc</goal>
								</goals>
								<configuration>
									<backend>html</backend>
									<doctype>book</doctype>
									<attributes>
										<snippets>${project.build.directory}/generated-snippets</snippets>
									</attributes>
									<sourceDirectory>src/docs/asciidoc</sourceDirectory>
									<outputDirectory>src/docs/html</outputDirectory>
								</configuration>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>org.springframework.restdocs</groupId>
								<artifactId>spring-restdocs-asciidoctor</artifactId>
								<version>${version.spring-restdocs-asciidoctor}</version>
							</dependency>
						</dependencies>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- A profile that creates the api-docs from swagger -->
		<profile>
			<id>api-docs-swagger</id>
			<build>
				<plugins>
					<!-- Reads the current project-version form git. For mor information 
						see: https://www.baeldung.com/spring-git-information -->
					<plugin>
						<groupId>pl.project13.maven</groupId>
						<artifactId>git-commit-id-plugin</artifactId>
						<executions>
							<execution>
								<id>get-the-git-infos</id>
								<goals>
									<goal>revision</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<failOnNoGitDirectory>false</failOnNoGitDirectory>
							<dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
							<prefix>git</prefix>
							<verbose>false</verbose>
							<generateGitPropertiesFile>true</generateGitPropertiesFile>
							<generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>
							<format>json</format>
							<gitDescribe>
								<skip>false</skip>
								<always>false</always>
								<dirty>-dirty</dirty>
							</gitDescribe>
							<!-- Including only specified data. -->
							<includeOnlyProperties>
								<includeOnlyProperty>git.commit.id</includeOnlyProperty>
								<includeOnlyProperty>git.commit.user.name</includeOnlyProperty>
								<includeOnlyProperty>git.commit.message.full</includeOnlyProperty>
								<includeOnlyProperty>git.build.time</includeOnlyProperty>
								<includeOnlyProperty>git.build.version</includeOnlyProperty>
							</includeOnlyProperties>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- To run the security check: mvn validate -Powasp -->
			<id>owasp</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.owasp</groupId>
						<artifactId>dependency-check-maven</artifactId>
						<version>${version.dependency-check-maven}</version>
						<configuration>
							<!-- Sets the number of hours to wait before checking for new updates 
								from the NVD. -->
							<cveValidForHours>24</cveValidForHours>
							<!-- Specifies if the build should be failed if a CVSS score equal 
								to or above a specified level is identified. The default is 11; since the 
								CVSS scores are 0-10, by default the build will never fail. Set up a quality 
								gate for vulnerabilities with high severity level: let's consider that a 
								vulnerability has a high severity level if its CVSS score is higher than 
								7 the build is going to fail if vulnerabilities with high severity level 
								found. -->
							<failBuildOnCVSS>7</failBuildOnCVSS>
							<!-- The report format to be generated (HTML, XML, CSV, JSON, JUNIT, 
								ALL). -->
							<format>HTML</format>
							<!-- Specify a list of known issues which contain: false-positives 
								confirmed vulnerabilities which are not fixed yet, but we have a ticket for 
								that. -->
							<suppressionFile>suppression-dependency-check-mvn.xml</suppressionFile>
							<!-- This is where write the generated reports. Note, this is not 
								used if generating the report as part of a mvn site build. Default folder 
								is ‘target’ (${project.build.directory}). It can be changed. -->
							<outputDirectory>${project.build.directory}</outputDirectory>
						</configuration>
						<executions>
							<execution>
								<id>check-dependencies-for-vulnerabilities</id>
								<phase>validate</phase>
								<goals>
									<goal>check</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
