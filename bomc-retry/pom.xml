<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>de.bomc.poc</groupId>
		<artifactId>bomc-parent-pom</artifactId>
		<version>1.00.00-SNAPSHOT</version>
	</parent>

	<artifactId>bomc-retry</artifactId>
	<packaging>war</packaging>
	<name>bomc-retry</name>
	<description>A poc that uses the hystrix command to invoke another service.</description>

	<properties>
		<!-- Explicitly declaring the source encoding eliminates the following 
			message: -->
		<!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
			resources, i.e. build is platform dependent! -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- Property verhindert, dass be AusfÃ¼hrung von 'mvn clean install' die 
			Unit-Tests ge-'skipped' werden. -->
		<maven.test.skip>false</maven.test.skip>

		<!-- JBoss dependency versions -->
		<version.wildfly.maven.plugin>1.1.0.Final</version.wildfly.maven.plugin>

		<!-- Define the version of the JBoss BOMs we want to import to specify 
			tested stacks. -->
		<version.wildfly-javaee7>10.1.0.Final</version.wildfly-javaee7>

		<version.logging-lib>1.00.00-SNAPSHOT</version.logging-lib>
		<version.rest-lib>1.00.00-SNAPSHOT</version.rest-lib>
		<version.archaius-core>0.7.5</version.archaius-core>
		<version.hystrix-core>1.5.12</version.hystrix-core>
		<version.hystrix-metrics-event-stream>1.5.12</version.hystrix-metrics-event-stream>
		<version.rxjava>1.3.0</version.rxjava>
<!-- 		<version.guava>18.0</version.guava> -->
		<version.arquillian-jacoco>1.0.0.Alpha9</version.arquillian-jacoco>
		<version.org.jacoco.core>0.8.0</version.org.jacoco.core>
		<version.asm-util>3.3.1</version.asm-util>
		<version.log4j>1.2.17</version.log4j>
		<version.javax.json>1.0.3</version.javax.json>
		<version.hamcrest-all>1.3</version.hamcrest-all>
		<version.resteasy-client>3.0.19.Final</version.resteasy-client>
		<version.javax.enterprise.concurrent-api>1.0</version.javax.enterprise.concurrent-api>
		<version.jackson-annotations>2.7.4</version.jackson-annotations>

		<!-- other plugin versions -->
		<version.compiler.plugin>3.1</version.compiler.plugin>
		<version.surefire.plugin>2.19.1</version.surefire.plugin>
		<version.war.plugin>2.5</version.war.plugin>
		<version.jacoco-maven-plugin>0.8.0</version.jacoco-maven-plugin>

		<!-- maven-compiler-plugin -->
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.source>1.8</maven.compiler.source>

		<!-- Properties for arquillian tests. -->
		<!-- Example for start vm-wildfly parameter. -->
		<wildfly.server.config>standalone.xml</wildfly.server.config>
		<!-- <wildfly.management.address>192.168.4.1</wildfly.management.address> -->
		<!-- <wildfly.address>192.168.4.1</wildfly.address> -->
		<wildfly.management.address>127.0.0.1</wildfly.management.address>
		<wildfly.address>127.0.0.1</wildfly.address>
		<wildfly.port>10090</wildfly.port>
		<wildfly.port.offset>100</wildfly.port.offset>
		<!-- IMPORTANT: These properties must be adapted to a available local Wildfly 
			instance. -->
		<!-- These properties are necessary for the managed profiles. -->
		<wildfly.home>${project.basedir}/wildfly-run/wildfly-${version.wildfly-javaee7}</wildfly.home>
		<arq.wildfly.java.vm.arg.managed>
			-Djboss.socket.binding.port-offset=${wildfly.port.offset}
			-Djboss.bind.address=${wildfly.address}
			-Djboss.bind.address.management=${wildfly.management.address}
			-Djboss.node.name=auth.local
			-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n
		</arq.wildfly.java.vm.arg.managed>
	</properties>


	<dependencyManagement>
		<dependencies>
			<!-- JBoss distributes a complete set of Java EE 7 APIs including a Bill 
				of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection) 
				of artifacts. We use this here so that we always get the correct versions 
				of artifacts. Here we use the jboss-javaee-7.0-with-tools stack (you can 
				read this as the JBoss stack of the Java EE 7 APIs, with some extras tools 
				for your project, such as Arquillian for testing) and the jboss-javaee-7.0-with-hibernate 
				stack you can read this as the JBoss stack of the Java EE 7 APIs, with extras 
				from the Hibernate family of projects) -->
			<dependency>
				<groupId>org.wildfly.bom</groupId>
				<artifactId>wildfly-javaee7-with-tools</artifactId>
				<version>${version.wildfly-javaee7}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>

			<dependency>
				<groupId>log4j</groupId>
				<artifactId>log4j</artifactId>
				<version>${version.log4j}</version>
			</dependency>

			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-annotations</artifactId>
				<version>${version.jackson-annotations}</version>
			</dependency>

			<!-- Hystrix -->
			<dependency>
				<groupId>com.netflix.hystrix</groupId>
				<artifactId>hystrix-core</artifactId>
				<version>${version.hystrix-core}</version>
			</dependency>
			<dependency>
				<groupId>com.netflix.hystrix</groupId>
				<artifactId>hystrix-metrics-event-stream</artifactId>
				<version>${version.hystrix-metrics-event-stream}</version>
			</dependency>
			<dependency>
				<groupId>io.reactivex</groupId>
				<artifactId>rxjava</artifactId>
				<version>${version.rxjava}</version>
			</dependency>
			<!-- Using for collecting data for hystrix. -->
			<!-- <dependency> -->
			<!-- <groupId>io.prometheus</groupId> -->
			<!-- <artifactId>simpleclient</artifactId> -->
			<!-- <version>${version.simpleclient}</version> -->
			<!-- </dependency> -->
			<!-- End: Hystrix -->
<!-- 			<dependency> -->
<!-- 				<groupId>com.google.guava</groupId> -->
<!-- 				<artifactId>guava</artifactId> -->
<!-- 				<version>${version.guava}</version> -->
<!-- 			</dependency> -->

			<dependency>
				<groupId>org.hamcrest</groupId>
				<artifactId>hamcrest-all</artifactId>
				<version>${version.hamcrest-all}</version>
			</dependency>

			<!-- Used for jacoco test coverage -->
			<dependency>
				<groupId>org.jboss.arquillian.extension</groupId>
				<artifactId>arquillian-jacoco</artifactId>
				<version>${version.arquillian-jacoco}</version>
			</dependency>
			<dependency>
				<groupId>org.jacoco</groupId>
				<artifactId>org.jacoco.core</artifactId>
				<version>${version.org.jacoco.core}</version>
			</dependency>
			<dependency>
				<groupId>asm</groupId>
				<artifactId>asm-util</artifactId>
				<version>${version.asm-util}</version>
			</dependency>
			<!-- End: Used for jacoco test coverage -->

			<dependency>
				<groupId>de.bomc.poc</groupId>
				<artifactId>logging-lib</artifactId>
				<version>${version.logging-lib}</version>
			</dependency>

			<dependency>
				<groupId>de.bomc.poc</groupId>
				<artifactId>rest-lib</artifactId>
				<version>${version.rest-lib}</version>
			</dependency>

			<!-- https://mvnrepository.com/artifact/org.wildfly/wildfly-ejb3 -->
			<dependency>
				<groupId>org.wildfly</groupId>
				<artifactId>wildfly-ejb3</artifactId>
				<version>${version.wildfly-javaee7}</version>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- First declare the APIs we depend on and need for compilation. All 
			of them are provided by JBoss WildFly -->

		<!-- Import the CDI API, we use provided scope as the API is included in 
			JBoss WildFly -->
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.spec.javax.interceptor</groupId>
			<artifactId>jboss-interceptors-api_1.2_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the Common Annotations API (JSR-250), we use provided scope 
			as the API is included in JBoss WildFly -->
		<dependency>
			<groupId>org.jboss.spec.javax.annotation</groupId>
			<artifactId>jboss-annotations-api_1.2_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-client</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jackson-provider</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JPA API, we use provided scope as the API is included in 
			JBoss WildFly -->
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.1-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the EJB API, we use provided scope as the API is included in 
			JBoss WildFly -->
		<dependency>
			<groupId>org.jboss.spec.javax.ejb</groupId>
			<artifactId>jboss-ejb-api_3.2_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
		</dependency>

		<!-- JSR-303 (Bean Validation) Implementation -->
		<!-- Provides portable constraints such as @Email -->
		<!-- Hibernate Validator is shipped in JBoss WildFly -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Import the JSF API, we use provided scope as the API is included in 
			JBoss WildFly -->
		<dependency>
			<groupId>org.jboss.spec.javax.faces</groupId>
			<artifactId>jboss-jsf-api_2.2_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Now we declare any tools needed -->

		<!-- Annotation processor that raising compilation errors whenever constraint 
			annotations are incorrectly used. -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator-annotation-processor</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Hystrix -->
		<dependency>
			<groupId>com.netflix.hystrix</groupId>
			<artifactId>hystrix-core</artifactId>
		</dependency>
		<dependency>
			<groupId>com.netflix.hystrix</groupId>
			<artifactId>hystrix-metrics-event-stream</artifactId>
		</dependency>
		<dependency>
			<groupId>io.reactivex</groupId>
			<artifactId>rxjava</artifactId>
		</dependency>
		<!-- <dependency> -->
		<!-- <groupId>io.prometheus</groupId> -->
		<!-- <artifactId>simpleclient</artifactId> -->
		<!-- </dependency> -->
		<!-- End: Hystrix -->

		<!-- Used for concurrency in ejb's executor -->
		<dependency>
			<groupId>org.jboss.spec.javax.enterprise.concurrent</groupId>
			<artifactId>jboss-concurrency-api_1.0_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.spec.javax.servlet</groupId>
			<artifactId>jboss-servlet-api_3.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<scope>provided</scope>
		</dependency>

<!-- 		<dependency> -->
<!-- 			<groupId>com.google.guava</groupId> -->
<!-- 			<artifactId>guava</artifactId> -->
			<!-- Scope TODO -->
			<!-- <version>18.0</version> -->
<!-- 		</dependency> -->

		<dependency>
			<groupId>de.bomc.poc</groupId>
			<artifactId>logging-lib</artifactId>
		</dependency>

		<dependency>
			<groupId>de.bomc.poc</groupId>
			<artifactId>rest-lib</artifactId>
		</dependency>

		<!-- Needed for running tests (you may also use TestNG) -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Used for jacoco test coverage -->
		<dependency>
			<groupId>org.jboss.arquillian.extension</groupId>
			<artifactId>arquillian-jacoco</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jacoco</groupId>
			<artifactId>org.jacoco.core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>asm</groupId>
			<artifactId>asm-util</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- End: Used for jacoco test coverage -->

		<!-- Optional, but highly recommended -->
		<!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA) 
			JPA from JUnit/TestNG -->
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.arquillian.container</groupId>
			<artifactId>arquillian-container-test-api</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.arquillian.protocol</groupId>
			<artifactId>arquillian-protocol-servlet</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Maven resolver api -->
		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-depchain</artifactId>
			<type>pom</type>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-impl-maven</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-api-maven</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.shrinkwrap.descriptors</groupId>
			<artifactId>shrinkwrap-descriptors-impl-javaee</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.shrinkwrap</groupId>
			<artifactId>shrinkwrap-api</artifactId>
			<scope>test</scope>
		</dependency>


		<dependency>
			<groupId>org.wildfly</groupId>
			<artifactId>wildfly-ejb3</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<!-- Maven will append the version to the finalName (which is the name 
			given to the generated war, and hence the context root) -->
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>${version.war.plugin}</version>
				<configuration>
					<!-- Java EE 7 doesn't require web.xml, Maven needs to catch up! -->
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
			<!-- The WildFly plugin deploys your war to a local WildFly container -->
			<!-- To use, run: mvn package wildfly:deploy -->
			<plugin>
				<groupId>org.wildfly.plugins</groupId>
				<artifactId>wildfly-maven-plugin</artifactId>
				<version>${version.wildfly.maven.plugin}</version>
			</plugin>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${version.jacoco-maven-plugin}</version>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<!-- Dies ist das Default-Profile bei dem Junit Tests IMMER ausgefÃ¼hrt 
				werden. 'mvn clean install'. -->
			<!-- Damit Testabdeckung ausgefÃ¼hrt wird, Befehl 'mvn clean test jacoco:report' 
				auf Kommandozeile ausfÃ¼hren. -->
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<skip>false</skip>
							<runOrder>alphabetical</runOrder>
							<!-- Excludes integration tests when unit tests are running. -->
							<excludes>
								<exclude>**/*IT.java</exclude>
							</excludes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- An optional Arquillian testing profile that executes tests in a remote 
				WildFly instance -->
			<!-- Run with: mvn clean test -Parq-wildfly-remote with code coverage 
				'mvn clean verify -Parq-wildfly-remote' -->
			<id>arq-wildfly-remote</id>
			<dependencies>
				<dependency>
					<groupId>org.wildfly.arquillian</groupId>
					<artifactId>wildfly-arquillian-container-remote</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<skip>false</skip>
							<includes>
								<include>**/*TestIT.java</include>
							</includes>
							<systemProperties>
								<java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
								<arquillian.launch>wildfly-remote</arquillian.launch>
								<arq.wildfly.management.address>${wildfly.management.address}</arq.wildfly.management.address>
								<arq.wildfly.management.port>${wildfly.port}</arq.wildfly.management.port>
							</systemProperties>
						</configuration>
						<executions>
							<execution>
								<id>integration-tests</id>
								<phase>test</phase>
								<goals>
									<goal>test</goal>
								</goals>
								<configuration>
									<skip>false</skip>
								</configuration>
							</execution>
							<execution>
								<!-- We need to verify the content of jacoco.exec after the 'test' 
									JVM has shutdown and flushed the data to disk. -->
								<id>verify-output-tests</id>
								<phase>test</phase>
								<goals>
									<goal>test</goal>
								</goals>
								<configuration>
									<skip>false</skip>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>
</project>
