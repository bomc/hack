<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>de.bomc.poc</groupId>
		<artifactId>bomc-parent-pom</artifactId>
		<version>1.00.00-SNAPSHOT</version>
	</parent>

	<artifactId>bomc-flyway-db-ejb</artifactId>

	<version>1.00.00-SNAPSHOT</version>

	<packaging>war</packaging>

	<name>${project.artifactId}::This is a test project that handles automated db-schema update during deployment process.</name>

	<description>A bomc project that handles automated db-schema update during deployment process.</description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<version.wildfly-javaee7>10.1.0.Final</version.wildfly-javaee7>
		<version.rest-lib>1.00.00-SNAPSHOT</version.rest-lib>
		<version.logging-lib>1.00.00-SNAPSHOT</version.logging-lib>
		<!-- <version.cdi-api>1.2</version.cdi-api> -->
		<version.log4j>1.2.17</version.log4j>
		<version.javaee-api>7.0</version.javaee-api>
		<version.flyway-core>5.0.1</version.flyway-core>
		<version.slf4j-simple>1.7.25</version.slf4j-simple>

		<!-- Other plugins. -->
		<version.war.plugin>2.5</version.war.plugin>

		<!-- Properties for arquillian tests. -->
		<!-- Example for start vm-wildfly parameter. -->
		<version.wildfly>10.1.0.Final</version.wildfly>
		<wildfly.management.address>192.168.4.1</wildfly.management.address>
		<wildfly.port>10090</wildfly.port>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.wildfly.bom</groupId>
				<artifactId>wildfly-javaee7-with-tools</artifactId>
				<version>${version.wildfly-javaee7}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- First declare the APIs we depend on and need for compilation. All 
			of them are provided by JBoss WildFly -->

		<dependency>
			<groupId>de.bomc.poc</groupId>
			<artifactId>logging-lib</artifactId>
			<version>${version.logging-lib}</version>
		</dependency>

		<!-- JavaEE API -->
		<dependency>
			<groupId>javax</groupId>
			<artifactId>javaee-api</artifactId>
			<version>${version.javaee-api}</version>
			<scope>provided</scope>
		</dependency>

		<!-- FlywayDb Database migration -->
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
			<version>${version.flyway-core}</version>
		</dependency>

		<!-- Hibernate -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Logging -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Needed for running tests (you may also use TestNG) -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Optional, but highly recommended -->
		<!-- Arquillian allows you to test enterprise code -->
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.arquillian.container</groupId>
			<artifactId>arquillian-container-test-api</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.arquillian.protocol</groupId>
			<artifactId>arquillian-protocol-servlet</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Maven resolver api -->
		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-depchain</artifactId>
			<type>pom</type>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-impl-maven</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-api-maven</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.shrinkwrap.descriptors</groupId>
			<artifactId>shrinkwrap-descriptors-impl-javaee</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.shrinkwrap</groupId>
			<artifactId>shrinkwrap-api</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<!-- Maven will append the version to the finalName (which is the name 
			given to the generated war, and hence the context root) -->
		<finalName>${project.artifactId}</finalName>

		<!-- Enable resource filter to get necessary resources. -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/db/migration/*</include>
					<include>**/db/*</include>
					<include>**/META-INF/persistence.xml</include>
				</includes>
				<filtering>true</filtering>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>${version.war.plugin}</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<!-- <archive> -->
					<!-- <manifestEntries> -->
					<!-- <Dependencies>org.hibernate:main</Dependencies> -->
					<!-- </manifestEntries> -->
					<!-- </archive> -->
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>analyze</id>
						<goals>
							<goal>analyze-only</goal>
						</goals>
						<configuration>
							<failOnWarning>false</failOnWarning>
							<outputXML>true</outputXML>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<!-- Dies ist das Default-Profile bei dem Junit Tests IMMER ausgeführt 
				werden. 'mvn clean install'. -->
			<!-- Damit Testabdeckung ausgeführt wird, Befehl 'mvn clean test jacoco:report' 
				auf Kommandozeile ausführen. -->
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<skip>false</skip>
							<runOrder>alphabetical</runOrder>
							<!-- Excludes integration tests when unit tests are running. -->
							<excludes>
								<exclude>**/*IT.java</exclude>
							</excludes>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-enforcer-plugin</artifactId>
						<executions>
							<execution>
								<id>enforce-property</id>
								<goals>
									<goal>enforce</goal>
								</goals>
								<configuration>
									<rules>
										<requireProperty>
											<property>maven.test.skip</property>
											<message>*** Property 'maven.test.skip' muss definiert
												werden. ***</message>
											<regex>false</regex>
											<regexMessage>*** Autsch, bei Ausfuehrung des
												'default'-Profils, koennen die Tests NICHT ge-'skipped'
												werden!</regexMessage>
										</requireProperty>
									</rules>
									<fail>true</fail>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- Ein Profil bei dem die Tests ge-'skipped' werden, 'mvn clean install 
				-PskipTest'. -->
			<id>skipTest</id>
			<activation>
			</activation>

			<!-- Creates a archive with in-memory db and datasource name: ExampleDS -->
			<properties>
				<datasource.name>ExampleDS</datasource.name>
			</properties>

			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Profile that creates a archive for in-memory db and datasource name: 
			ExampleDS -->
		<profile>
			<id>db_dev</id>
			<properties>
				<datasource.name>ExampleDS</datasource.name>
			</properties>
		</profile>

		<!-- Profile that creates a archive for in-memory db and datasource name: 
			ExampleMySQLDS -->
		<profile>
			<id>db_prod</id>
			<properties>
				<datasource.name>ExampleMySQLDS</datasource.name>
			</properties>
		</profile>

		<profile>
			<!-- An optional Arquillian testing profile that executes tests in a remote 
				WildFly instance -->
			<!-- Run with: mvn clean test -Parq-wildfly-remote with code coverage 
				'mvn clean verify -Parq-wildfly-remote' -->
			<id>arq-wildfly-remote</id>
			<properties>
				<datasource.name>ExampleDS</datasource.name>
			</properties>
			<dependencies>
				<dependency>
					<groupId>org.wildfly.arquillian</groupId>
					<artifactId>wildfly-arquillian-container-remote</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<skip>false</skip>
							<includes>
								<include>**/*TestIT.java</include>
							</includes>
							<systemProperties>
								<java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
								<arquillian.launch>wildfly-remote</arquillian.launch>
								<arq.wildfly.management.address>${wildfly.management.address}</arq.wildfly.management.address>
								<arq.wildfly.management.port>${wildfly.port}</arq.wildfly.management.port>
							</systemProperties>
						</configuration>
						<executions>
							<execution>
								<id>integration-tests</id>
								<phase>test</phase>
								<goals>
									<goal>test</goal>
								</goals>
								<configuration>
									<skip>false</skip>
								</configuration>
							</execution>
							<execution>
								<!-- We need to verify the content of jacoco.exec after the 'test' 
									JVM has shutdown and flushed the data to disk. -->
								<id>verify-output-tests</id>
								<phase>test</phase>
								<goals>
									<goal>test</goal>
								</goals>
								<configuration>
									<skip>false</skip>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
